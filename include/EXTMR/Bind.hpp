
/******************************************************************************      
 *      Extended Mirror: Bind.hpp                                             *
 ******************************************************************************
 *      Copyright (c) 2012-2014, Manuele Finocchiaro                          *
 *      All rights reserved.                                                  *
 ******************************************************************************
 * Redistribution and use in source and binary forms, with or without         *
 * modification, are permitted provided that the following conditions         *
 * are met:                                                                   *
 *                                                                            *
 *    1. Redistributions of source code must retain the above copyright       *
 *       notice, this list of conditions and the following disclaimer.        *
 *                                                                            *
 *    2. Redistributions in binary form must reproduce the above copyright    *
 *       notice, this list of conditions and the following disclaimer in      *
 *       the documentation and/or other materials provided with the           *
 *       distribution.                                                        *
 *                                                                            *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"* 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE *
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE  *
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR        *
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF       *
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   *
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN    *
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)    *
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF     *
 * THE POSSIBILITY OF SUCH DAMAGE.                                            *
 *****************************************************************************/

/* WARNING: This file has been autogenerated. do not modify it directly! */

#ifndef EXTMR_BIND_HPP
#define	EXTMR_BIND_HPP


#define EXTMR_GET_N_SET_EXTRA_PARAM_MAX 3
#define EXTMR_METHOD_PARAM_MAX 8


#define EXTMR_MNP(member) #member, &ClassT::member
#define EXTMR_BIND_BASE(BaseT) bindBase<ClassT, BaseT>();
#define EXTMR_BIND_PASE(BaseT) bindPmBase<ClassT, BaseT>(); // polymorphic base


namespace extmr{


template<class ClassT, class BaseT>
void bindBase()
{
    // ensure that base class is registered
    registerType<BaseT>();
    
    Class& clazz = const_cast<Class&>(getClass<ClassT>());
    Class& base = const_cast<Class&>(getClass<BaseT>());
    
    // bind them together
    clazz & base;
    
    // bind RefCaster to base
    clazz & *new RefCasterImpl<ClassT, BaseT>();
}


template<class ClassT, class BaseT>
void bindPmBase()
{
    bindBase<ClassT, BaseT>();
    
    // bind RefCast from BaseT to CassT
    const_cast<Class&>(getClass<BaseT>()) & *new RefCasterImpl<BaseT, ClassT>();
}


/*
 * Collection of functions to allow registration of properties and methods
 * through the parameter type deduction mechanism.
 */

template<class ClassT, typename FieldT>
Property& bindProperty(const std::string& name, FieldT ClassT::* field)
{
    // ensure that the type is registered
    registerType<FieldT>();
    
    // build the Property  and add it to the Class
    return const_cast<Class&>(getClass<ClassT>())
            & *new PropertyField<ClassT, FieldT>(name, field);
}


template<class ClassT, typename FieldT, std::size_t size>
Property& bindProperty(const std::string& name,
        FieldT (ClassT::* field) [size])
{
    // ensure that the type is registered
    registerType<FieldT[size]>();
    
    // build the Property  and add it to the Class
    return const_cast<Class&>(getClass<ClassT>())
            & *new PropertyArrayField<ClassT, FieldT[size]>(name, field);
}


template
<
    class ClassT,
    typename RetT
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            Empty
        >
        (
            name,
            getter,
            false,
            setter
        );
}


template
<
    class ClassT,
    typename RetT
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
    ) const
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            Empty
        >
        (
            name,
            getter_nc,
            true,
            setter
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
    ),
    void (ClassT::*setter)
    (
        ParamT
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            ParamT
        >
        (
            name,
            getter,
            false,
            setter
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
    ) const,
    void (ClassT::*setter)
    (
        ParamT
    )
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
            )
        >(getter);
        
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_0_ExtrParams
        <
            ClassT,
            RetT,
            ParamT
        >
        (
            name,
            getter_nc,
            true,
            setter
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ) const,
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0
    ),
    ExtrParamT0 extrArg0
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0
            )
        >(getter);
        
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_1_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ) const,
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1
            )
        >(getter);
        
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_2_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ) const,
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1,
                ExtrParamT2
            )
        >(getter);
        
    // setter points to NULL
    void (ClassT::*setter)(Empty) =
        static_cast<void(ClassT::*)(Empty)>(NULL);
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            Empty,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            name,
            getter,
            false,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT,
    typename ExtrParamT0,
    typename ExtrParamT1,
    typename ExtrParamT2
>
Property& bindProperty(
    const std::string& name,
    RetT (ClassT::*getter)
    ( 
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ) const,
    void (ClassT::*setter)
    (
        ParamT,
        ExtrParamT0,
        ExtrParamT1,
        ExtrParamT2
    ),
    ExtrParamT0 extrArg0,
    ExtrParamT1 extrArg1,
    ExtrParamT2 extrArg2
)
{   
    // ensure that the type is registered
    registerType<RetT>();
    
    // remove constness from the getter method
    RetT (ClassT::*getter_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ExtrParamT0,
                ExtrParamT1,
                ExtrParamT2
            )
        >(getter);
        
    
    // build the Property
    return const_cast<Class&>(getClass<ClassT>())
        & *new PropertyGetterNSetter_3_ExtrParams
        <
            ClassT,
            RetT,
            ParamT,
            ExtrParamT0,
            ExtrParamT1,
            ExtrParamT2
        >
        (
            name,
            getter_nc,
            true,
            setter,
            extrArg0,
            extrArg1,
            extrArg2
        );
}


template
<
    class ClassT,
    typename RetT
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_0_Params
        <
            ClassT,
            RetT
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_0_Params
        <
            ClassT,
            RetT
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_1_Params
        <
            ClassT,
            RetT,
            ParamT0
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_1_Params
        <
            ClassT,
            RetT,
            ParamT0
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_2_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_2_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_3_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_3_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_4_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2,
                ParamT3
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_4_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_5_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2,
                ParamT3,
                ParamT4
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_5_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_6_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2,
                ParamT3,
                ParamT4,
                ParamT5
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_6_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_7_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2,
                ParamT3,
                ParamT4,
                ParamT5,
                ParamT6
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_7_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6
        >
        (
            name,
            method_nc,
            true
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6,
    typename ParamT7
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6,
        ParamT7
    ) 
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    registerType<ParamT7>();
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_8_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6,
            ParamT7
        >
        (
            name,
            method,
            false
        );
}


template
<
    class ClassT,
    typename RetT,
    typename ParamT0,
    typename ParamT1,
    typename ParamT2,
    typename ParamT3,
    typename ParamT4,
    typename ParamT5,
    typename ParamT6,
    typename ParamT7
>
Method& bindMethod
(
    const std::string& name,
    RetT (ClassT::*method)
    ( 
        ParamT0,
        ParamT1,
        ParamT2,
        ParamT3,
        ParamT4,
        ParamT5,
        ParamT6,
        ParamT7
    ) const
)
{
    // ensure the types are registered
    registerType<RetT>();
    registerType<ParamT0>();
    registerType<ParamT1>();
    registerType<ParamT2>();
    registerType<ParamT3>();
    registerType<ParamT4>();
    registerType<ParamT5>();
    registerType<ParamT6>();
    registerType<ParamT7>();
    
    // remove the constness from the method
    RetT (ClassT::*method_nc)() =
        reinterpret_cast
        <
            RetT (ClassT::*)
            (
                ParamT0,
                ParamT1,
                ParamT2,
                ParamT3,
                ParamT4,
                ParamT5,
                ParamT6,
                ParamT7
            )
        >(method);
    
    // create the proper Method
    return const_cast<Class&>(getClass<ClassT>())
        & *new MethodImpl_8_Params
        <
            ClassT,
            RetT,
            ParamT0,
            ParamT1,
            ParamT2,
            ParamT3,
            ParamT4,
            ParamT5,
            ParamT6,
            ParamT7
        >
        (
            name,
            method_nc,
            true
        );
}


} // namespace extmr

#endif	/* EXTMR_BIND_HPP */