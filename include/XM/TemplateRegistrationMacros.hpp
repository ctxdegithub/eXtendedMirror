
/******************************************************************************      
 *      Extended Mirror: TemplateRegistrationMacros.hpp                       *
 ******************************************************************************
 *      Copyright (c) 2012-2014, Manuele Finocchiaro                          *
 *      All rights reserved.                                                  *
 ******************************************************************************
 * Redistribution and use in source and binary forms, with or without         *
 * modification, are permitted provided that the following conditions         *
 * are met:                                                                   *
 *                                                                            *
 *    1. Redistributions of source code must retain the above copyright       *
 *       notice, this list of conditions and the following disclaimer.        *
 *                                                                            *
 *    2. Redistributions in binary form must reproduce the above copyright    *
 *       notice, this list of conditions and the following disclaimer in      *
 *       the documentation and/or other materials provided with the           *
 *       distribution.                                                        *
 *                                                                            *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"* 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE *
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE  *
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR        *
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF       *
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   *
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN    *
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)    *
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF     *
 * THE POSSIBILITY OF SUCH DAMAGE.                                            *
 *****************************************************************************/

/* WARNING: This file has been autogenerated. do not modify it directly! */

#ifndef XM_BINDTEMPLATE_HPP
#define XM_BINDTEMPLATE_HPP

#define XM_TEMPLATE_PARAM_MAX 4


/**
 * \def XM_ENABLE_TEMPLATE_1(_template_)
 * 
 * Use to enable instances of template class to be registered as such.
 * 
 * Works only with two type parameters template classes.
 * After this macro, specify the body of the building function.
 */
#define XM_ENABLE_TEMPLATE_1(_template_)        \
namespace xm{                                                                \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0                                \
>                                                                            \
struct GetTypeName                                                           \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        std::string str = std::string(#_template_) + "<";                    \
        str += GetTypeName<T0>()();     \
        if (str[str.length() - 1] == '>')                                    \
        {                                                                    \
            str += " ";                                                      \
        }                                                                    \
        str += ">";                                                          \
        return str;                                                          \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0                                \
>                                                                            \
struct GetTemplateName                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        return #_template_;                                                  \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0                                \
>                                                                            \
struct GetTemplateArgs                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Const_Type_Vector operator()()                                           \
    {                                                                        \
        Const_Type_Vector templateArgs;                                      \
        templateArgs.push_back(&registerType<T0>()); \
        return templateArgs;                                                 \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0                                \
>                                                                            \
struct BuildClass                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    typedef _template_                                                       \
    <                                                                        \
        T0                                     \
    > ClassT;                                                                \
    void operator()();                                                       \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0                                \
>                                                                            \
struct CreateType                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Type& operator()()                                                       \
    {                                                                        \
        return CompoundClass::create                                         \
            <                                                                \
                _template_                                                   \
                <                                                            \
                    T0                         \
                >                                                            \
            >();                                                             \
    }                                                                        \
};                                                                           \
                                                                             \
} // namespace xm



/**
 * \def XM_ENABLE_TEMPLATE_2(_template_)
 * 
 * Use to enable instances of template class to be registered as such.
 * 
 * Works only with two type parameters template classes.
 * After this macro, specify the body of the building function.
 */
#define XM_ENABLE_TEMPLATE_2(_template_)        \
namespace xm{                                                                \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1                                \
>                                                                            \
struct GetTypeName                                                           \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        std::string str = std::string(#_template_) + "<";                    \
        str += GetTypeName<T0>()();                         \
        str += ", " + GetTypeName<T1>()();     \
        if (str[str.length() - 1] == '>')                                    \
        {                                                                    \
            str += " ";                                                      \
        }                                                                    \
        str += ">";                                                          \
        return str;                                                          \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1                                \
>                                                                            \
struct GetTemplateName                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        return #_template_;                                                  \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1                                \
>                                                                            \
struct GetTemplateArgs                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Const_Type_Vector operator()()                                           \
    {                                                                        \
        Const_Type_Vector templateArgs;                                      \
        templateArgs.push_back(&registerType<T0>());        \
        templateArgs.push_back(&registerType<T1>()); \
        return templateArgs;                                                 \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1                                \
>                                                                            \
struct BuildClass                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    typedef _template_                                                       \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    > ClassT;                                                                \
    void operator()();                                                       \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1                                \
>                                                                            \
struct CreateType                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Type& operator()()                                                       \
    {                                                                        \
        return CompoundClass::create                                         \
            <                                                                \
                _template_                                                   \
                <                                                            \
                    T0,                                     \
                    T1                         \
                >                                                            \
            >();                                                             \
    }                                                                        \
};                                                                           \
                                                                             \
} // namespace xm



/**
 * \def XM_ENABLE_TEMPLATE_3(_template_)
 * 
 * Use to enable instances of template class to be registered as such.
 * 
 * Works only with two type parameters template classes.
 * After this macro, specify the body of the building function.
 */
#define XM_ENABLE_TEMPLATE_3(_template_)        \
namespace xm{                                                                \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2                                \
>                                                                            \
struct GetTypeName                                                           \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        std::string str = std::string(#_template_) + "<";                    \
        str += GetTypeName<T0>()();                         \
        str += ", " + GetTypeName<T1>()();                         \
        str += ", " + GetTypeName<T2>()();     \
        if (str[str.length() - 1] == '>')                                    \
        {                                                                    \
            str += " ";                                                      \
        }                                                                    \
        str += ">";                                                          \
        return str;                                                          \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2                                \
>                                                                            \
struct GetTemplateName                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        return #_template_;                                                  \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2                                \
>                                                                            \
struct GetTemplateArgs                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Const_Type_Vector operator()()                                           \
    {                                                                        \
        Const_Type_Vector templateArgs;                                      \
        templateArgs.push_back(&registerType<T0>());        \
        templateArgs.push_back(&registerType<T1>());        \
        templateArgs.push_back(&registerType<T2>()); \
        return templateArgs;                                                 \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2                                \
>                                                                            \
struct BuildClass                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    typedef _template_                                                       \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    > ClassT;                                                                \
    void operator()();                                                       \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2                                \
>                                                                            \
struct CreateType                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Type& operator()()                                                       \
    {                                                                        \
        return CompoundClass::create                                         \
            <                                                                \
                _template_                                                   \
                <                                                            \
                    T0,                                     \
                    T1,                                     \
                    T2                         \
                >                                                            \
            >();                                                             \
    }                                                                        \
};                                                                           \
                                                                             \
} // namespace xm



/**
 * \def XM_ENABLE_TEMPLATE_4(_template_)
 * 
 * Use to enable instances of template class to be registered as such.
 * 
 * Works only with two type parameters template classes.
 * After this macro, specify the body of the building function.
 */
#define XM_ENABLE_TEMPLATE_4(_template_)        \
namespace xm{                                                                \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2,                                            \
    typename T3                                \
>                                                                            \
struct GetTypeName                                                           \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        std::string str = std::string(#_template_) + "<";                    \
        str += GetTypeName<T0>()();                         \
        str += ", " + GetTypeName<T1>()();                         \
        str += ", " + GetTypeName<T2>()();                         \
        str += ", " + GetTypeName<T3>()();     \
        if (str[str.length() - 1] == '>')                                    \
        {                                                                    \
            str += " ";                                                      \
        }                                                                    \
        str += ">";                                                          \
        return str;                                                          \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2,                                            \
    typename T3                                \
>                                                                            \
struct GetTemplateName                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    std::string operator()()                                                 \
    {                                                                        \
        return #_template_;                                                  \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2,                                            \
    typename T3                                \
>                                                                            \
struct GetTemplateArgs                                                       \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Const_Type_Vector operator()()                                           \
    {                                                                        \
        Const_Type_Vector templateArgs;                                      \
        templateArgs.push_back(&registerType<T0>());        \
        templateArgs.push_back(&registerType<T1>());        \
        templateArgs.push_back(&registerType<T2>());        \
        templateArgs.push_back(&registerType<T3>()); \
        return templateArgs;                                                 \
    }                                                                        \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2,                                            \
    typename T3                                \
>                                                                            \
struct BuildClass                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    typedef _template_                                                       \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    > ClassT;                                                                \
    void operator()();                                                       \
};                                                                           \
                                                                             \
template                                                                     \
<                                                                            \
    typename T0,                                            \
    typename T1,                                            \
    typename T2,                                            \
    typename T3                                \
>                                                                            \
struct CreateType                                                            \
<                                                                            \
    _template_                                                               \
    <                                                                        \
        T0,                                                 \
        T1,                                                 \
        T2,                                                 \
        T3                                     \
    >                                                                        \
>                                                                            \
{                                                                            \
    Type& operator()()                                                       \
    {                                                                        \
        return CompoundClass::create                                         \
            <                                                                \
                _template_                                                   \
                <                                                            \
                    T0,                                     \
                    T1,                                     \
                    T2,                                     \
                    T3                         \
                >                                                            \
            >();                                                             \
    }                                                                        \
};                                                                           \
                                                                             \
} // namespace xm



#endif	/* XM_BINDTEMPLATE_HPP */